
use std::error::Error;

//use libp2p ::{ gossipsub , mdns , noise , swarm :: NetworkBehaviour , tcp , yamux , Swarm , SwarmBuilder };
use libp2p::{identity, PeerId, gossipsub, mdns, swarm::NetworkBehaviour, SwarmBuilder, noise, tcp, yamux, Swarm};

pub struct EasyBehaviour {
    pub gossipsub : gossipsub :: Behaviour
//    pub mdns : mdns :: tokio :: Behaviour ,
}

pub fn setup () -> Swarm < EasyBehaviour > {
    let network_stack = SwarmBuilder :: with_new_identity ()
        .with_tokio ()
        .with_tcp (
            tcp :: Config :: default () ,
            noise :: Config :: new ,
            yamux :: Config :: default ,
        )
        .expect (" Valid tcp transport ")
        .with_quic ()
        .with_behaviour (| key | {

            let message_id_fn = | message : & gossipsub :: Message | {
                let mut dh = DefaultHasher :: new () ;
                message.sequence_number.hash (& mut dh );
                gossipsub :: MessageId :: from ( dh . finish () . to_string () )
            };


            let gossipsub_config = gossipsub :: ConfigBuilder :: default ()
                .heartbeat_interval ( Duration :: from_secs (10) )
                .validation_mode ( gossipsub :: ValidationMode :: Strict )
                .message_id_fn ( message_id_fn )
                .build ()
                .expect (" Valid gossipsub config ");


            let gossipsub = gossipsub :: Behaviour :: new (
                    gossipsub :: MessageAuthenticity :: Signed ( key . clone () ) ,
                    gossipsub_config , )
                .expect (" Valid gossipsub network behaviour ");

            let mdns = mdns :: tokio :: Behaviour :: new ( mdns :: Config :: default () , key . public () . to_peer_id () )
                .expect (" Valid mdns config ");

            EasyBehaviour { gossipsub , /* mdns */ };
        })
        .expect (" Valid behaviour ")
        .build () ;

    return network_stack ;
}

fn main() {
    println!("p2p-node started");

    // create a keypair for our peer to use.
    let local_key = identity::Keypair::generate_ed25519();
    // println!("bytes: {:?}", local_key.to_protobuf_encoding());

    // create a peerid from our keypair.
    let local_peer_id = PeerId::from(local_key.public());

    // print the Peer ID cryptographic hash
    println!("Local peer id: {:?}", local_peer_id);

}
